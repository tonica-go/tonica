package project

const bugYaml = `version: v1

name: buf.build/local/{{ .Name }}

lint:
  use:
    - DEFAULT

breaking:
  use:
    - FILE

deps:
  - buf.build/googleapis/googleapis
  - buf.build/grpc-ecosystem/grpc-gateway

# No need for excludes here; module root is api/proto

`

const bufgenYaml = `version: v1

plugins:
  - plugin: buf.build/protocolbuffers/go
    out: proto
    opt:
      - paths=source_relative

  - plugin: buf.build/grpc/go
    out: proto
    opt:
      - paths=source_relative

  - plugin: buf.build/grpc-ecosystem/gateway
    out: proto
    opt:
      - paths=source_relative

  - plugin: buf.build/grpc-ecosystem/openapiv2
    out: openapi
    opt:
      - allow_merge=true
      - merge_file_name=openapi
`

const bufworkYaml = `version: v1

# Workspace so buf can be run from repo root
# while proto module lives in api/proto
directories:
  - proto

`

const golangciYaml = `version: "2"

linters-settings:
  sloglint:
    # Enforce not mixing key-value pairs and attributes.
    # Default: true
    no-mixed-args: false
    # Enforce using key-value pairs only (overrides no-mixed-args, incompatible with attr-only).
    # Default: false
    kv-only: true
    # Enforce using attributes only (overrides no-mixed-args, incompatible with kv-only).
    # Default: false
    attr-only: true
    # Enforce using methods that accept a context.
    # Default: false
    context-only: true
    # Enforce using static values for log messages.
    # Default: false
    static-msg: true
    # Enforce using constants instead of raw keys.
    # Default: false
    no-raw-keys: true
    # Enforce a single key naming convention.
    # Values: snake, kebab, camel, pascal
    # Default: ""
    key-naming-case: snake
    # Enforce putting arguments on separate lines.
    # Default: false
    args-on-sep-lines: true
`

const mainGo = `package main

import (
	"strings"

	"github.com/alexrett/tonica/pkg/tonica"
	"github.com/alexrett/tonica/pkg/tonica/config"
)

func main() {
	app := tonica.NewApp(
		//tonica.WithSpec("openapi/openapi.swagger.json"), // define path to openapi spec here
		tonica.WithConfig(
			config.NewConfig(
				config.WithRunMode(
					config.GetEnv("APP_MODE", config.ModeAIO),
				),
				config.WithServices(
					strings.Split(",", config.GetEnv("APP_SERVICES", "")),
				),
			),
		),
	)
	initServices(app)
	err := app.Run()
	if err != nil {
		app.GetLogger().Fatal(err)
	}
}

func initServices(app *tonica.App) {
	// implement services initialization logic here
}

`

const dotEnv = `APP_SERVICES=
LOG_LEVEL=debug
APP_MODE=aio
`

const gitignore = `.idea
**/*.pb.gw.go
**/*.pb.go
openapi
`

const bufLock = `# Generated by buf. DO NOT EDIT.
version: v1
deps:
  - remote: buf.build
    owner: googleapis
    repository: googleapis
    commit: 61b203b9a9164be9a834f58c37be6f62
    digest: shake256:e619113001d6e284ee8a92b1561e5d4ea89a47b28bf0410815cb2fa23914df8be9f1a6a98dcf069f5bc2d829a2cfb1ac614863be45cd4f8a5ad8606c5f200224
  - remote: buf.build
    owner: grpc-ecosystem
    repository: grpc-gateway
    commit: 4c5ba75caaf84e928b7137ae5c18c26a
    digest: shake256:e174ad9408f3e608f6157907153ffec8d310783ee354f821f57178ffbeeb8faa6bb70b41b61099c1783c82fe16210ebd1279bc9c9ee6da5cffba9f0e675b8b99
`
